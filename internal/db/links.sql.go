// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: links.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createLink = `-- name: CreateLink :one
INSERT INTO links (url) VALUES ($1) RETURNING id, url, created_at, deleted_at
`

func (q *Queries) CreateLink(ctx context.Context, url string) (*Link, error) {
	row := q.db.QueryRow(ctx, createLink, url)
	var i Link
	err := row.Scan(
		&i.ID,
		&i.Url,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const deleteLinkById = `-- name: DeleteLinkById :one
UPDATE links SET deleted_at = CURRENT_TIMESTAMP WHERE id = $1 RETURNING id, url, created_at, deleted_at
`

func (q *Queries) DeleteLinkById(ctx context.Context, id uuid.UUID) (*Link, error) {
	row := q.db.QueryRow(ctx, deleteLinkById, id)
	var i Link
	err := row.Scan(
		&i.ID,
		&i.Url,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const findLinkById = `-- name: FindLinkById :one
SELECT id, url, created_at, deleted_at FROM links WHERE id = $1 LIMIT 1
`

func (q *Queries) FindLinkById(ctx context.Context, id uuid.UUID) (*Link, error) {
	row := q.db.QueryRow(ctx, findLinkById, id)
	var i Link
	err := row.Scan(
		&i.ID,
		&i.Url,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const findLinkByUrl = `-- name: FindLinkByUrl :one
SELECT id, url, created_at, deleted_at FROM links WHERE url = $1 LIMIT 1
`

func (q *Queries) FindLinkByUrl(ctx context.Context, url string) (*Link, error) {
	row := q.db.QueryRow(ctx, findLinkByUrl, url)
	var i Link
	err := row.Scan(
		&i.ID,
		&i.Url,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const listLinks = `-- name: ListLinks :many
SELECT id, url, created_at, deleted_at FROM links
WHERE url != ''
ORDER BY deleted_at, created_at desc
`

func (q *Queries) ListLinks(ctx context.Context) ([]*Link, error) {
	rows, err := q.db.Query(ctx, listLinks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Link{}
	for rows.Next() {
		var i Link
		if err := rows.Scan(
			&i.ID,
			&i.Url,
			&i.CreatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const unDeleteLinkById = `-- name: UnDeleteLinkById :one
UPDATE links SET deleted_at = NULL WHERE id = $1 RETURNING id, url, created_at, deleted_at
`

func (q *Queries) UnDeleteLinkById(ctx context.Context, id uuid.UUID) (*Link, error) {
	row := q.db.QueryRow(ctx, unDeleteLinkById, id)
	var i Link
	err := row.Scan(
		&i.ID,
		&i.Url,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return &i, err
}
